/**
 * ‚ùå Please do not edit this file.
 */

import InstrumentReel, { InstrumentReelProps } from "../edit-me/InstrumentReel";
import "./App.css";
import { FormEvent, useRef, useState } from "react";
import { InstrumentSymbol } from "../../common-leave-me";

const allInstrumentSymbols: InstrumentSymbol[] = [
  "BTC",
  "SP500",
  "ETH",
  "EURUSD",
  "US100",
  "TSLA",
  "AAPL",
];

interface InstrumentReelItem extends InstrumentReelProps {
  id: string;
}

const initialInstrumentReels: InstrumentReelItem[] = [
  {
    id: "initial",
    instrumentSymbols: allInstrumentSymbols,
  },
];

function App() {
  const formRef = useRef<HTMLFormElement>(null);
  const [instrumentReels, setInstrumentReels] = useState<InstrumentReelItem[]>(
    initialInstrumentReels
  );

  const submitHandler = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    if (!formRef.current) {
      return;
    }

    const formData = new FormData(formRef.current);
    const instrumentCsv = formData.get("instrumentSymbols");

    const instrumentSymbols = instrumentCsv
      ?.toString()
      .split(",")
      .map((t) => t.trim().toUpperCase() as InstrumentSymbol)
      .filter((t) => allInstrumentSymbols.includes(t));

    if (instrumentSymbols) {
      setInstrumentReels((prev) => [
        ...prev,
        { instrumentSymbols, id: Date.now().toString() },
      ]);
    }
  };

  const deleteHandler = (id: string) => {
    setInstrumentReels((prev) => prev.filter((item) => item.id !== id));
  };

  return (
    <div className="app">
      <form ref={formRef} onSubmit={submitHandler}>
        <input
          name="instrumentSymbols"
          placeholder={`Comma separated list: ${allInstrumentSymbols.join(
            ", "
          )}`}
          required
        />
        <button type="submit">New Instrument Reel</button>
      </form>

      {instrumentReels.map((instrumentReel, i) => (
        <div key={instrumentReel.id} className="tt-wrapper">
          <InstrumentReel {...instrumentReel} />
          <span
            role="button"
            className="tt-wrapper__close"
            onClick={() => deleteHandler(instrumentReel.id)}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              strokeWidth={1.5}
              stroke="currentColor"
              className="w-6 h-6"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </span>
        </div>
      ))}
    </div>
  );
}

export default App;
